===================================================================================================
NOBLE ARCHITECTURE WEBSITE - TEXT TO READER UTILITY
FILE NAME |  SN10_01_-_UTIL_-_Text-To-Reader-App/SN10_01_01_-_PAGE_-_Text-To-Reader-App.html
FILE TYPE |  INFO

VERSION HISTORY
04-Apr-2025 - Version 1.2.4 - Current Release
- WhatsApp message parsing improvements
- Accessibility enhancements
- Mobile responsive design updates

DESCRIPTION
- A utility to parse WhatsApp chat text or render Markdown text into a readable format
- Single-file web application combining HTML, CSS, and JavaScript
- Created by Adam Noble - Noble Architecture
===================================================================================================


## SCRIPT DESCRIPTION
---------------------------------------------------------------------------------------------------

This HTML file contains the complete code for the Text To Reader Utility.
It integrates HTML, CSS, and JavaScript into a single file to provide functionalities including:
- Text input area for pasting raw text (intended for WhatsApp chat exports or Markdown).
- A parsing function (`parseWhatsAppMessages`) specifically designed to remove WhatsApp timestamp/sender prefixes (`[dd/mm, HH:MM] Sender Name: `).
- If the text doesn't match the WhatsApp pattern, it's treated as standard Markdown.
- Utilizes the third-party Marked.js library (via CDN) to render the cleaned or original text as HTML.
- An output area displaying the rendered HTML.
- Action buttons for rendering the text and clearing the input/output fields.
- Adherence to the "RE10_20_01-_SCHEMA_-_Core-Web-Dev-Code-Conventions.txt" standard.
- Dynamic injection of the application version (from meta tag) into the header title using the `injectVersionNote` helper function.

## ISSUES & LESSONS LEARNED  
---------------------------------------------------------------------------------------------------

- WhatsApp Pattern Specificity: The `parseWhatsAppMessages` function relies on a specific regex pattern `\[\d{1,2}\/\d{1,2},\s*\d{1,2}:\d{2}\]\s*[^:]+:\s*`. 
- Changes in WhatsApp export format could break this parser. It assumes `[dd/mm, HH:MM] Name:` structure.
- Marked.js Dependency: Relies on the external Marked.js library hosted on a CDN. If the CDN is unavailable or the library changes its API, rendering will fail.
- Basic Parsing: The WhatsApp parsing is basic; it only removes the prefix. It doesn't handle other WhatsApp-specific formatting (like italics `_text_` or bold `*text*` differently than standard Markdown). Marked.js handles standard Markdown formatting after the prefix removal.
- No Error Handling for Marked.js: If `marked.parse()` throws an error, it's not currently caught.


## PARSING LOGIC ARCHITECTURE
---------------------------------------------------------------------------------------------------

1. Input Acquisition: User pastes text into `#inputText`.
2. Render Trigger: User clicks `#renderButton`.
3. WhatsApp Check: `handleRenderClick` calls `parseWhatsAppMessages` with the input text.
4. Pattern Matching: `parseWhatsAppMessages` uses a regex (`testPattern`) to check if the input *looks like* a WhatsApp chat log (checks for at least one instance of the timestamp/sender prefix).
5. Conditional Processing:
    - If Match: A second regex (`replacePattern`) globally removes all occurrences of the prefix, replacing them with double newlines (`\n\n`) to create paragraph breaks. Extra consecutive newlines are collapsed. The cleaned text is returned.
    - If No Match: The original input text is returned unmodified.
6. Markdown Rendering: The text returned from `parseWhatsAppMessages` (either cleaned or original) is passed to `marked.parse()`.
7. Output Display: The HTML string generated by `marked.parse()` is injected into the `#output` div's `innerHTML`.


## VISUAL JAVASCRIPT FUNCTION FLOW (Simplified)
---------------------------------------------------------------------------------------------------

DOMContentLoaded -> initApp()
    ├── Cache DOM Elements (G_DOM_ELEMENTS)
    ├── injectVersionNote() -> Updates #app-title
    └── Attach Event Listeners
        ├── #renderButton -> handleRenderClick()
        │   └── parseWhatsAppMessages(inputText) -> cleanedText
        │   └── marked.parse(cleanedText) -> renderedHtml
        │   └── Update #output.innerHTML
        └── #clearButton -> handleClearClick()
            └── Clear #inputText, #output


## FUTURE SCRIPT IMPROVEMENTS & IDEAS
---------------------------------------------------------------------------------------------------
- More Robust WhatsApp Parsing: Handle variations in date/time format or potential name complexities.
- Optional Formatting: Allow users to choose whether to keep/strip Markdown/WhatsApp formatting characters (*, _, ~).
- Error Handling: Add `try...catch` around `marked.parse()` and provide user feedback on errors.
- Syntax Highlighting: Potentially add syntax highlighting to the input textarea for Markdown.
- Local Storage: Option to save/load input text.
- Theme Options: Basic light/dark theme switcher.


## SCRIPT DEVELOPMENT & VERSION HISTORY TRACKER
---------------------------------------------------------------------------------------------------


#### LIST FUTURE UPDATES HERE
??-???-???? - vX.Y.Z
-
-
-

#### STYLESHEET OPTIMISATION
08-Apr-2025 - v1.2.4
- Integrated with main Noble Architecture stylesheet.
- Removed duplicate styles.
- Added proper font-face declarations.
- Ensured consistent naming conventions.
- Reduced application size by leveraging shared styles.
                    

#### CSS STYLE GUIDE ALIGNMENT
07-Apr-2025 - v1.2.3
- Refactored CSS to align with project style guide.
- Implemented proper block naming conventions (PAGE__, HEAD__, etc.).
- Converted pixel values to rem units.
- Added CSS variables for colors and other values.
- Applied column-like formatting for CSS properties.
- Updated HTML to use class-based selectors instead of IDs.
- Added responsive design improvements.
- Updated JavaScript to work with new class names.


#### CODE CONVENTION REFACTOR & VERSION INJECTION 
03-Apr-2025 - v1.2.1
- Applied "RE10_20_01-_SCHEMA_-_Core-Web-Dev-Code-Conventions.txt".
- Added Master File Header comment block with full details.
- Added detailed region/sub-region comment blocks (HTML, CSS, JS).
- Added Application Version Meta Tag (`1.2.1`).
- Implemented dynamic version note injection into header title:
    - Added `injectVersionNote` helper function.
    - Added `G_DOM_ELEMENTS` for caching.
    - Added `initApp` function for initialization.
    - Added `DOMContentLoaded` listener.
- Refactored event listeners into named handler functions (`handleRenderClick`, `handleClearClick`).
- Updated version history tracking.
- Added Accessibility improvements (label for input, ARIA for output).


#### 10-Mar-2025 - v1.0.0
- Basic HTML structure.
- CSS styling.
- Core WhatsApp parsing logic.
- Marked.js integration.
- Render and Clear functionality


===================================================================================================
-->