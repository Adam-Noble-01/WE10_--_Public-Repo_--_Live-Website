---
====================================================================================================
NOBLE ARCHITECTURE WEBSITE & APPLICATIONS - Core Project File & Code Naming Conventions
AD10_02_-_READ_-_Core-Project-File-And-Code-Naming-Conventions-Document.txt
 
VERSION HISTORY
05-Apr-2025 - Version 1.0.1 - Initial Draft
09-Apr-2025 - Version 1.1.1 - Added Unique Asset Identification System breakdown

DESCRIPTION
- This document is the core conventions reference document for the project.
- These codes are global across the project and are used to identify the file type of a given file.
- These code also define the naming conventions for code objects, variables, functions, etc.
- All code MUST align with the standards set out in this document.

====================================================================================================
---

## ASSET NAMING CONVENTION RULES
###### A Breakdown Of The Projects Core Asset Naming Conventions
-------------------------------------------------------------------------------

#### Notes On Image & Graphical Asset Naming Conventions
Format Example String
 `NA0#_0#_-_NA-Pictogram_-_PNG_-_1500px_-_Idea-Lightbulb.png`
 
Filename Breakdown
    - `NA0#`            :    Variable prefix matching 2 letter + 2 digit code; used to group files by type.
    - `0#`              :    Sequential item number within the series (e.g., `01, 02, 03` etc.)
    - `NA-Pictogram`    :    Asset type identifier
    - `PNG`             :    File format
    - `1500px`          :    Resolution/size specification
    - `Idea-Lightbulb`  :    Descriptive name of the pictogram in Title Case with hyphens

- Always use string with no white spaces or special characters.
- Never spaces in filenames.
- Use hyphens `-` instead of underscores `_` for word separation in the descriptive part.
- Create clear string sections using `_-_`
- Use sequential numbering for each file listed.
- File number prefix codes are always unique globally.
    - This ensure easy searching sorting and indexing of all assets.
- Use descriptive names are brief but clear
- Descriptions are always in `Title Case`


### UNIQUE ASSET IDENTIFICATION SYSTEM
----------------------------------------------------------------------------------------------------
- The Noble Architecture website uses a asset identification system that ensures every asset in the project has a truly unique identifier code.
- This system follows a hierarchical pattern that reflects both the asset's category and its specific instance.

#### Basic Format
Asset ID codes follow one of two formats:
- Two-level format: `XX##_##`
- Three-level format: `XX##_##_##`

Where:
- `XX` represents a two-letter category prefix
- `##` represents a two-digit numeric identifier
- `_##` represents an additional two-digit numeric identifier
- `_##` (optional) represents a third two-digit numeric identifier for more specific categorization

#### Category Prefixes
The first two letters of each asset ID code indicate the asset's primary category:
- `AD` - Common Data assets
- `DC` - Documentation files
- `NA` - Noble Architecture specific assets
- `SN` - Static website assets

#### Uniqueness Guarantee
This system guarantees uniqueness through several mechanisms:

*Hierarchical Organization* | The prefix-letter combination creates a top-level category (e.g., AD for Common Data)
*Sequential Numbering*      | The first numeric component (##) creates a subcategory
*Instance Identification*   | The second numeric component (_##) identifies specific instances within that subcategory
*Extended Specificity*      | When needed, a third numeric component (_##) provides even more specific identification

#### Examples from the Codebase
- `AD04_01` - First font in the Common Front Files category (Open Sans Regular)
- `AD04_21` - First handwritten font in the Common Front Files category (Caveat Regular)
- `AD05_07` - Seventh icon in the Common Icons category (Favicon ICO)
- `DC10_12` - Twelfth document in the Core Coding Rules category (CSS Files)

This structured approach ensures that:
- No two assets can ever have the same ID code
- The ID code itself provides information about the asset's category and purpose
- The system is extensible for future additions
- Asset relationships can be inferred from their ID codes



### FILE PREFIX SECTION BREAKDOWN
----------------------------------------------------------------------------------------------------

### Primary Prefix Codes
- The first two letter and two number section at the very beginning of the filename.
- This section is used to identify the main group the file belongs to.

#### High Level File Group Codes
`DC##`  =  Project Specific Documentation such as this file.
`AD##`  =  Common Asset Directory; containing images, fonts, icons, etc.
`NA##`  =  Noble Architecture Directory; containing company specific files.
`NB##`  =  NobleAudio Directory; containing NobleAudio specific files.
`SN##`  =  'Studio NoodlFj√∏rd' (Programming Studio Name) Directory; containing programming files.

#### Script File Type Codes
`JS##`  =  JavaScript File
`CS##`  =  CSS Style Sheet File
`HT##`  =  HTML Document File
`JN##`  =  JSON Data File


### Project File Type Reference List
----------------------------------------------------------------------------------------------------

**Information & Documentation Files**
`READ`  =  Readme files containing information about the project.
`RULE`  =  Text File Defining strict rules and MANDATORY coding conventions.
`INFO`  =  A Readme file of less importance than a READ or RULE file.
`USER`  =  A User Guide or User Manual designed for non-technical users of the project.
`DLIS`  =  Defines task lists, improvements ideas and other notes during development, means "Development List".

**Data Files**
`DATA`  =  A Directory of data files for the project; note data typically stores data in a structured json format.

**Application Files**
`APPS`  =  A Directory containing collections of scripts making up a complete application typically.

**Style Files**
`STYL`  =  Refers to CSS style sheet files defining a style or set of styles.

**Code Files**
`HTML`  =  Refers to HTML files containing the structure and content of the project.
`JSON`  =  Refers to JSON files which store data in a structured format for the project.
`SCRP`  =  Refers to standardised project script files containing JavaScript code.
`SETP`  =  Denotes template files & folders; meaning term means "Setup".
`PAGE`  =  Refers to a static page of the website.

**Asset Files**
`LOGO`  =  Refers to a logo or branded graphic file for the project.


    
### Project JavaScript Function Code Reference List
----------------------------------------------------------------------------------------------------
`LOAD-FN`  =  Loading Function



### CORE UNITS FORMAT REFERENCE
----------------------------------------------------------------------------------------------------

*Date Format:*      |   `dd-mmm-yyyy`
*Time Format:*      |   `hh:mm`

*Example*
`09-Apr-2025 | 14:45`

#### Rationale
- This format is clear, compact 
- Widely used in British administrative and technical documents. 
- It avoids confusion between UK and US date styles.



### PRELIMINARY SCRP FILES INDEX
----------------------------------------------------------------------------------------------------
- This list is temporary and will be replaced with a more permanent list of files in the future.
- Replaced with a proper Json file in the future.

#### SCRIPT ROOT DIRECTORY
`src/Core-JavaScript-Library/`

**Directory**   |   `JS01_-_UTIL_-_Utility-Scripts_-_Page-&-HTML-Manipulation`
**File-Name**   |   `JS01_01_-_UTIL_-_Version-Number-Header-Injection.js`  
**Path**        |   `src/Core-JavaScript-Library/JS01_-_UTIL_-_Utility-Scripts_-_Page-&-HTML-Manipulation/JS01_01_-_UTIL_-_Version-Number-Header-Injection.js`  
- A utility script for injecting the version number into the header of a web page.
- Useful to use the already present version meta tag in the head of the document.
- Reduces the amount places version numbers need to be updated in the codebase.



----------------------------------------------------------------------------------------------------
###### END OF FILE 

