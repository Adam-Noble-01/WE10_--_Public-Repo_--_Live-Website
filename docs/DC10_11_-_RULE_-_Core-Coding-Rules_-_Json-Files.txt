---
====================================================================================================
NOBLE ARCHITECTURE WEBSITE - CORE JSON CODING RULES
FILE NAME |  DC10_11_-_RULE_-_Core-Coding-Rules_-_Json-Files.txt
FILE TYPE |  RULE

VERSION HISTORY
04-Apr-2025 - Version 1.0.0 - Initial Draft
04-Apr-2025 - Version 1.1.0 
- Updated indentation rules to 4 spaces
- Standardized JSON formatting conventions
- Added tiered architecture documentation
- Enhanced property alignment rules

DESCRIPTION
- This document defines the structure, naming conventions, and design principles for JSON-based configuration files.
- All JSON files in the project must adhere to these formatting and structural rules.
- These rules ensure consistency, readability, and maintainability across all JSON configurations.
====================================================================================================
---

# JSON Formatting Convention
----------------------------------------------------------------------------------------------------

## DOCUMENT OVERVIEW

#### Document Purpose
This document defines the structure, naming conventions, and design principles for JSON-based configuration files used across Noble Architecture's digital systems.

#### Project JSON Files Key Concepts
- These files act as centralised sources of truth for website and platform configuration data
- Ensures consistency, clarity, and easy validation
- A critical point is to use easy-to-read JSON files for automation
- The Noble Architecture website and apps are built on the principle of JSON-driven automation
- JSON files are the standard configuration format for the website and associated applications
- JSON files serve as the **primary metadata store** for every page, asset, or component
- Each page or app has its own associated JSON file, which defines:
  - Metadata
  - Dependencies
  - Version history
- JSON files also record dependencies for any file or asset that must be served by the website or application
- Third-party libraries, tools, and CDN references are also recorded using structured JSON entries


## TIERED JSON NESTING ARCHITECTURE AND INDENTATION RULES
----------------------------------------------------------------------------------------------------

### Structural Levels

#### Level 1 — Top-Level Objects
- Use `Title_Case_With_Underscores`
- Represent major structural categories
- Examples: `File_Metadata`, `Site_Config_Settings`

#### Level 2 and Beyond — Nested Keys
- Use `lowercase-hyphen-format`
- All nested keys maintain this format regardless of depth
- Examples: `file-name`, `site-dev-tools-mode`

### Key Formatting Rules

#### Property Name Alignment
- All property names must be left-aligned within their level
- Add exactly 2 spaces after the property name
- Add a colon
- Add exactly 2 spaces after the colon before the value

#### Example Format
```json
{
    "File_Metadata": {
        "file-name"         :  "example.json",
        "file-type"         :  "json",
        "file-category"     :  "Configuration Files",
        "file-description"  :  {
            "heading"       :  "Example File",
            "details"       :  [
                "First point",
                "Second point"
            ]
        }
    }
}
```

### Indentation Rules
- Use 4 spaces for each indentation level
- Never use tabs
- Maintain consistent indentation throughout the file
- Array elements should align with their parent property

### Version History Format
Version history should follow this structure:
```json
{
    "File_Version_History_Log": [
        {
            "version"         :  "1.0.0",
            "log-date"        :  "YYYY-MM-DD",
            "log-title"       :  "Title",
            "log-changes"     :  [
                "Change 1",
                "Change 2"
            ]
        }
    ]
}
```


## RATIONALE AND BENEFITS
----------------------------------------------------------------------------------------------------

### Enhanced Readability
- Clear visual hierarchy with 4-space indentation
- Aligned colons create scannable columns
- Consistent spacing makes patterns immediately visible

### Maintainability
- Predictable structure makes updates easier
- Clear version history tracking
- Easy to spot changes in version control

### Automation-Friendly
- Consistent naming conventions support automated processing
- Predictable structure enables reliable parsing
- Standard format makes validation straightforward

### Error Prevention
- Clear visual structure helps spot missing or malformed entries
- Consistent spacing makes structural errors obvious
- Standard naming prevents confusion

----------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------
#                         ⚠⚠⚠⚠ END OF PROJECT STANDARDS ⚠⚠⚠⚠
====================================================================================================
- BELOW ARE NOTES FOR FURTHER DEVELOPMENT
- ENSURE YOU DONOT USE THESE RULES FOR THE JSON FILES BELOW THIS POINT
---------------------------------------------------------------------------------------------------

## TYPICAL JSON PROPERTIES

### SEO and Analytics Properties
```json
{
    "seoSettings"           :  {
        "defaultTitle"        :  "Noble Architecture | Award-Winning Design Studio",
        "titleSeparator"      :  " | ",
        "defaultDescription"  :  "Noble Architecture specializes in sustainable modern design",
        "defaultKeywords"     :  "architecture, design, sustainable, modern, portfolio",
        "canonicalDomain"     :  "https://www.noble-architecture.com",
        "sitemapPath"         :  "sitemap.xml",
        "robotsTxtRules"      :  ["User-agent: *", "Disallow: /client-portal/"],
        "socialImage"         :  "assets/images/social-share.jpg",
        "socialAccounts"      :  {
            "instagram"         :  "@noble_architecture",
            "pinterest"         :  "noblearchitecture",
            "linkedIn"          :  "noble-architecture"
        }
    }
}
```

### User and Permission Properties
```json
{
    "userRoles"             :  {
        "admin"               :  {
            "accessLevel"       :  10,
            "permissions"       :  ["read", "write", "delete", "manage_users"]
        },
        "editor"              :  {
            "accessLevel"       :  7,
            "permissions"       :  ["read", "write", "limited_delete"]
        },
        "client"              :  {
            "accessLevel"       :  3,
            "permissions"       :  ["read_own", "comment"]
        },
        "public"              :  {
            "accessLevel"       :  1,
            "permissions"       :  ["read_public"]
        }
    }
}
```

