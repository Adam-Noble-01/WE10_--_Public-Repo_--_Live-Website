---
====================================================================================================
NOBLE ARCHITECTURE WEBSITE - CORE CSS STYLE CODE CONVENTIONS
FILE NAME |  AD10_05_-_RULE_-_Core-CSS-Style-Code-Conventions.txt
FILE TYPE |  RULE

VERSION HISTORY
01-May-2024 - Version 1.0.0 - Original Version
07-Apr-2025 - Version 1.1.0 
- Added comprehensive CSS naming conventions
- Added CSS property alignment standards
- Added section block formatting guidelines
- Added numerical values & units guidelines
- Added comment formatting guidelines

DESCRIPTION
- This file defines the CSS coding conventions for the Noble Architecture website.
- All CSS code must adhere to these standards for consistency.
- The guidelines ensure maintainable and readable stylesheets across the project.
====================================================================================================
---

# NOBLE ARCHITECTURE CSS CODING STYLE GUIDE
----------------------------------------------------------------------------------------------------

#### Document Purpose
- This document outlines the core CSS style conventions globally for the project.
- It its CRITICAL to consistent code formatting, naming patterns, and structure across all stylesheets.

#### CSS Coding Conventions Overview & Philosophy
- This project uses a systematic approach to CSS.
- Emphasising readability, maintainability, modularity, and structured component naming. 
- These conventions ensure that styles remain consistent across the project and that developers can easily identify and modify components as needed.


## CSS PROPERTIES, VALUES & COMMENTS CODE STRUCTURE & FORMATTING
----------------------------------------------------------------------------------------------------
### Column-Like Code Structure Formatting
- Properties and values must be written in "column" form for visual clarity
- Align colons and values in a consistent pattern
- Property names should be left-aligned
- Colons should be aligned with spaces (4 spaces minimum)
- Values should be aligned after colons (4 spaces minimum)

### Numerical Values & Units
- Stick to using `rem` units for all numerical values.
- Base font size is `16.00px` this sets the default size for the website.
    - Setting the base font size to `16.00px` allows for easy calculations of the `rem` units.
- Use leading zeros for decimal values (e.g., 00.50rem, not .5rem)
- For small values under 1, use leading zeros with 2 decimal places (e.g., 00.75rem)
- For whole numbers, use 2 decimal places for consistency (e.g., 01.00rem, 02.00rem)
- Always use at least `00.00` as this mostly keeps alot of the values in a consistent column-like format.

#### Example
```css
.selector {
    property-name       :    value;
    longer-property     :    value;
    short-prop          :    value;
}
```

### Comment Formatting
- Inline comments must be formatted with `/*   <-- [comment] */` pattern
- Maintain consistent spacing in comments
- Comments should explain purpose, not restate the obvious
- Aim to align groups of comments as best as possible to create a consistent column-like format.


#### Example
```css
.selector {
    display             :    none;       /*   <-- Hidden by default */
    font-size           :    16.00px;    /*  <-- CRITICAL VALUE!!  */
}
```



## NAMING CONVENTIONS
----------------------------------------------------------------------------------------------------

### Nesting Levels & Their Meaning / Purpose
- LEVEL 1 - Block Name              =  ALL CAPS
    - Then double-underscores `__`
- LEVEL 2 - Element Name            =  Title Case with hyphens
    - Then double-hyphens `--`
- LEVEL 3 - State Name / Modifier   =  lowercase with hyphens
    - NO MORE NESTING IS ALLOWED
- Avoid deep nesting of selectors (maximum 3 levels)
- Prefer class selectors over element selectors for specificity.
- Keep selectors as short as possible while maintaining clarity.


### Block Naming Pattern
- Use double-underscore naming convention for component blocks
- Format as `[BLOCK]__[element]` using uppercase for block names
- Block names should be in all caps & 4 characters ONLY.
    - This keeps the block names short & concise, and keeps them in column style format.
- Example blocks

```css
/* - - - - - - - Core Layout Blocks - - - - - - - - */
    PAGE__      /* =  Page Container Block          */
    HEAD__      /* =  Header Container Block        */
    MAIN__      /* =  Main Content Container Block  */
    FOOT__      /* =  Footer Container Block        */
    SIDE__      /* =  Sidebar Container Block       */
    NAVB__      /* =  Navigation Bar Block          */
    DASH__      /* =  Dashboard Container Block     */
/* - - - - - - - Common UI Components - - - - - - - */
    FORM__      /* =  Form Container Block          */
    BTTN__      /* =  Button Container Block        */
    MENU__      /* =  Menu Container Block          */
    CARD__      /* =  Card Container Block          */
    TABS__      /* =  Tabs Container Block          */
    LIST__      /* =  List Container Block          */
    HERO__      /* =  Hero Container Block          */
    MODL__      /* =  Modal Container Block         */
    ICNB__      /* =  Icon Button Block             */
/* - - - - - - - Interactive Elements - - - - - - - */
    DPDW__      /* =  Dropdown Container Block      */
    SRCH__      /* =  Search Container Block        */
    FLTR__      /* =  Filter Container Block        */
    SORT__      /* =  Sorting Container Block       */
    TOGL__      /* =  Toggle Container Block        */
    SLDR__      /* =  Slider Container Block        */
/* - - - - - - - Navigation Components - - - - - -  */
    BRDP__      /* =  Breadcrumb Path Block         */
    PAGI__      /* =  Pagination Block              */
    STPR__      /* =  Stepper Container Block       */
/* - - - - - - Feedback & Notifications - - - - - - */
    LOAD__      /* =  Loading/Spinner Block         */
    PROG__      /* =  Progress Bar Block            */
    NOTE__      /* =  Notice Container Block        */
    TOOL__      /* =  Tooltip Container Block       */
    SNBR__      /* =  Snackbar Container Block      */
/* - - - - - - - Container Components - - - - - - - */
    GRID__      /* =  Grid Container Block          */
    ACCR__      /* =  Accordion Container Block     */
    DRWR__      /* =  Drawer Container Block        */
    DLOG__      /* =  Dialog Container Block        */
    TRAY__      /* =  Tray Container Block          */
    CRSL__      /* =  Carousel Container Block      */
    CHIP__      /* =  Chip/Tag Container Block      */
    TBVW__      /* =  Table View Block              */
```


### Classes and Elements
----------------------------------------------------------------------------------------------------
- Element names should be lowercase with hyphens for multi-word elements
- State variations should use double-hyphens
- Use descriptive, functional names rather than presentational names

#### Examples
```css
    /* Header Block Examples */
    .HEAD__Container {}
    .HEAD__Nav {}
    .HEAD__Nav-Logo-Image {}
    .HEAD__Link--active {}
    .HEAD__Link--disabled {}
    .HEAD__Menu-Button--hover {}
    /* Main Content Block Examples */
    .MAIN__Container {}
    .MAIN__Content-Area {}
    .MAIN__Article-Card {}
    .MAIN__Article-Card--featured {}
    .MAIN__Article-Card--archived {}
    .MAIN__Search-Bar--focused {}
    /* Form Block Examples */
    .FORM__Container {}
    .FORM__Input-Group {}
    .FORM__Text-Field {}
    .FORM__Submit-Button {}
    .FORM__Text-Field--error {}
    .FORM__Text-Field--valid {}
    .FORM__Submit-Button--disabled {}
```



## CSS VARIABLES AND COLOR MANAGEMENT
----------------------------------------------------------------------------------------------------

### CSS Custom Properties
- Define all global variables in `:root` selector
- Use consistent naming pattern: `--[category]-[property]`
- Include comments for color purpose/usage
- Group related variables together (colors, spacing, typography)
- Use descriptive names that indicate purpose rather than value
- Maintain alphabetical ordering within groups for easy reference

#### Example
```css
:root {
    --primary-color      :    #555041;          /*   <-- Brand color */
    --primary-hover      :    #3d392e;          /*   <-- Darker shade */
    --text-color         :    #333;
}
```

### Color Usage
- Always use CSS variables for colors, never hardcode hex values in components
- Create semantic color variables based on usage (e.g., `--warning-text`, `--button-text`)
- Include both base colors and contextual usage colors



## FONT STANDARDISATION
----------------------------------------------------------------------------------------------------
- Fonts are served by the website and must be used as the primary source of fonts used across the project.
- Always use `https://noble-architecture.com/assets/AD04_-_LIBR_-_Common_-_Front-Files/` as the primary source of fonts.
    - Google fonts may to be used as a fallback source for the fonts if the Noble Architecture fonts are not available.

#### Standard Font File Names
- `assets/AD04_-_LIBR_-_Common_-_Front-Files/`
- These are the standard fonts used on the website.
- These fonts are served by the website.
- Noble Architecture uses `Open Sans` as the brands standard font.

```example_standard-font_file_names
AD04_01_-_Standard-Font_-_Open-Sans-Regular.ttf
AD04_02_-_Standard-Font_-_Open-Sans-SemiBold.ttf
AD04_03_-_Standard-Font_-_Open-Sans-Light.ttf
AD04_04_-_Standard-Font_-_Open-Sans-Medium.ttf
AD04_05_-_Standard-Font_-_Open-Sans-Bold.ttf
```

#### Handwritten Font File Names
- `assets/AD04_-_LIBR_-_Common_-_Front-Files/`
- These are the handwritten fonts used for the PlanVision Application.
    - Specifically used for the Markup & Annotation features.
- These fonts are served by the website.
- Noble Architecture uses `Caveat` as the brands handwritten font style.

```example_handwrittenfont_file_names
AD04_21_-_Handwritten-Font_-_Caveat-Regular.ttf
AD04_22_-_Handwritten-Font_-_Caveat-SemiBold.ttf
AD04_23_-_Handwritten-Font_-_Caveat-Medium.ttf
AD04_24_-_Handwritten-Font_-_Caveat-Bold.ttf
```


## RESPONSIVE DESIGN
----------------------------------------------------------------------------------------------------
### Responsive Values
- Prefer relative units `rem` units over absolute units (px)
- Base font size should be explicitly set (16.00px)
- Use the same column formatting in media queries

### Media Queries
- Group responsive overrides at the end of stylesheet
- Use standard breakpoints consistently across the project
- Default mobile breakpoint: 768px max-width
- For mobile devices, scale the entire site by adjusting the base font size
  - Current implementation: 90% scaling (14.40px) for screens under 768px
  - This approach automatically scales all rem-based elements proportionally

### Mobile Scaling Approach
- Instead of individual element adjustments, use a single font-size change
- This simplifies maintenance and ensures consistent scaling
- The base font size change affects all elements using rem units
- Additional adjustments may be needed for specific elements that don't use rem units

#### Example
```css
@media (max-width: 768px) {
    /* Scale down all elements by 90% on mobile devices */
    html, body {
        font-size         :    14.40px;    /*  <-- CRITICAL VALUE!! - This is 90% of the base font size */
    }
    
    /* Adjust container widths for mobile */
    .MAIN__container {
        max-width         :    100%;
        margin-left       :    1.00rem;
        margin-right      :    1.00rem;
    }
    
    /* Ensure images scale properly */
    img {
        max-width         :    100%;
        height            :    auto;
    }
}
```


## PERFORMANCE CONSIDERATIONS
----------------------------------------------------------------------------------------------------

### Efficiency Guidelines
- Minimize use of expensive properties (box-shadow, text-shadow, gradients)
- Group transitions and animations for better performance
- Use transform and opacity for animations when possible
- Avoid using !important except in utility classes

### Accessibility
- Text should be resizable and readable at different viewport sizes
    - Achieved using rem units for font sizes.


----------------------------------------------------------------------------------------------------

## FILE STRUCTURE AND FORMATTING

### Header Documentation
- Each CSS file must begin with a standardized header comment block
- The header must include file name, type, author, and description
- Version history should be maintained in the header
```css
/* ================================================================================================
/* STYLE SHEET FOR THE NOBLE ARCHITECTURE WEBSITE
   FILE NAME   |  [FILENAME].css
   FILE TYPE   |  CSS
/* ================================================================================================

   FILE DESCRIPTION
   - [Brief description]
   - [Purpose statement]

   VERSION HISTORY
   [Version] - [Description]
```

### Section Formatting
- Use standard section dividers with clear titles and version information
- Sections should be organized by component type or functional area
- Include introduction/update version history with each section
```css
/* =============================================================================
   CSS | [SECTION NAME]
   - Introduced in v[X.X.X] | Updated in v[X.X.X]
   - [Brief description]
   ========================================================================== */
```

### Subsection Formatting
- Use consistent hyphen-line dividers for subsections
- Include descriptive titles for each subsection
```css
/* - - - - - - - - - - - - -   [Subsection Title]   - - - - - - - - - - - - - */
```


----------------------------------------------------------------------------------------------------
###### END OF FILE 